- model_class = List
.page-header
  %h1=t '.title', :default => model_class.model_name.human.pluralize.titleize

/ only if you need custom infoboxes



%div{:style => "width: 800px;"}
  #map{:style => "width: 800px; height: 400px;"}

= form_tag lists_path, :method => :get, remote: true do
  %p
    = text_field_tag :search, params[:search], :id => "gmaps-input-address", :input_html =>{:id => 'gmaps-input-address'}, :placeholder => 'Start typing a place...'
    = submit_tag "Search Near", :name => nil, :id=>"ajax" 
  
%table.table.table-striped
  %thead
    %tr
      %th= model_class.human_attribute_name(:id)
      %th= model_class.human_attribute_name(:ride_title)
      %th= model_class.human_attribute_name(:ride_description)
      %th= model_class.human_attribute_name(:rider_height)
      %th= model_class.human_attribute_name(:frame_size)
      %th= model_class.human_attribute_name(:hourly_rental)
      %th= model_class.human_attribute_name(:morning_rental)
      %th= model_class.human_attribute_name(:evening_rental)
      %th= model_class.human_attribute_name(:daily_rental)
      %th= model_class.human_attribute_name(:weekly_rental)
      %th= model_class.human_attribute_name(:willing_to_deliver)
      %th= model_class.human_attribute_name(:address)
      %th= model_class.human_attribute_name(:city)
      %th= model_class.human_attribute_name(:state)
      %th= model_class.human_attribute_name(:latitude)
      %th= model_class.human_attribute_name(:longitude)
      %th= model_class.human_attribute_name(:pincode)
      %th= model_class.human_attribute_name(:landmark)
      %th= model_class.human_attribute_name(:created_at)
      %th=t '.actions', :default => t("helpers.actions")
  %tbody
    - @lists.each do |list|
      %tr
        %td= link_to list.id, list_path(list)
        %td= list.ride_title
        %td= list.ride_description
        %td= list.rider_height
        %td= list.frame_size
        %td= list.hourly_rental
        %td= list.morning_rental
        %td= list.evening_rental
        %td= list.daily_rental
        %td= list.weekly_rental
        %td= list.willing_to_deliver
        %td= list.address
        %td= list.city
        %td= list.state
        %td= list.latitude
        %td= list.longitude
        %td= list.pincode
        %td= list.landmark
        %td=l list.created_at
        %td
          = link_to t('.edit', :default => t("helpers.links.edit")), edit_list_path(list), :class => 'btn btn-default btn-xs'
          = link_to t('.destroy', :default => t("helpers.links.destroy")), list_path(list), :method => :delete, :data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) }, :class => 'btn btn-xs btn-danger'

= link_to t('.new', :default => t("helpers.links.new")), new_list_path, :class => 'btn btn-primary'



%script{:src => "//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js"}
%script{:src => "//google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.9/src/infobox_packed.js", :type => "text/javascript"}



:javascript

jQuery(function() {
  var completer;

  completer = new GmapsCompleter({
    inputField: '#gmaps-input-address',
    errorField: '#gmaps-error'

  });

  completer.autoCompleteInit({
    country: "in"
  })
});


$(function(){ 
  function rePositionMarkers(data) {
    var data_hash = data;
    var handler = Gmaps.build('Google');
    handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
      markers = handler.addMarkers(data_hash);
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
    });
  }

  $("#ajax").click(function(){
    var valuesToSubmit = $('#gmaps-input-address').val();
    $.ajax({
        type: "GET",
        url: $(this).attr('action'),
        data: { search: valuesToSubmit},
        dataType: "JSON" 
    }).success(function(json){
        rePositionMarkers(json); 
        
    });
    return false; // prevents normal behaviour
  })
});  



/ $(function(){

/   $("#ajax").click(function(){

/     alert("");
/     $.getJSON('/lists.json', function(json){
/       alert("Your jeson will apear her");
/       alert(json);
/       console.log("HHHHHHHHHHHHHHHHHHHHHH");
/       console.log(json);
/       console.log("HHHHHHHHHHHHHHHHHHHHHHENDDDDDDDDD");
/     })
/   })
/ });  



  $(document).ready(function(){
  var handler = Gmaps.build('Google');
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    markers = handler.addMarkers(#{raw @hash.to_json });
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  });
  });