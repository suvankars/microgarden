= simple_form_for @product, :html => {:multipart => true},:html => { :class => 'form-horizontal' } do |f|
  = field_set_tag 'Product details' do
    = f.hidden_field :subcategory_id
    %dl 
      %dd= f.input :name
      %dd= error_span(@product[:name])
    .splitContainer
      %dl.third
        %dd= f.input :skuid
        %dd= error_span(@product[:skuid])
      %dl.third
        %dd= f.input :permalink
        %dd= error_span(@product[:permalink])
      %dl.third 
    .splitContainer
      %dl.third
        %dd= f.input :supplier_id, collection: @supplier_names, :selected => @default_supplier
      %dl.third
        %dd= f.input :subcategory_id, :label => "Product Category", :collection => @subcategory_names, :selected => @default_subcategory
      %dl.third
        %dd= f.input :brand_id, :label => "Brand", :collection => @brand_names, :selected => @default_brand
        %dd= error_span(@product[:brand])
    %dl
      %dd= f.input :description
      %dd= error_span(@product[:description])
    %dl
      %dd= f.input :short_description, :level => false
      %dd= error_span(@product[:short_description])

  / = field_set_tag 'File Attachments' do
  /   = f.cl_image_upload(:image_id, :return_delete_token=>true)
  /   %span.status
  /   .preview
  
  
  /For adding new product using javascript to update the dom image div, as new image is uploaded 
  /through cloudinary image uploader
  / For Update imges of an product, used rails js based partial to fetch existing image in the 
  / update form then, if new images are added to the update form it will be saved by ajax call and 
  // Corrosponding div will be updated by ajax get request on success full image upload completion call back

  
  = field_set_tag 'Attachments' do
    %a.btn.btn-primary#upload_widget_opener{:href => "#"} Upload multiple images
    %ul#images
      %span.status 
      .preview
      -if !@product.new_record?
        = render @product

      
  / %span.status /Uncommment this two line to show uploaded images in unobtrusive way in edit page 
  / .preview  /Uncomment this too

  / %dl
  /   %dd
  /     - if !@product.cloudinary_images.nil?
  /       - @product.cloudinary_images.each_with_index do |image, index|
  /         =image_tag(image["thumbnail_url"]) 
  /         = link_to "Delete", product_image_path(@product, image["public_id"]), :inline_label => true, :method => :delete, data: { confirm: "Are you sure you want to delete this image?" }
      
    

  / = field_set_tag 'Attachments' do
  /   %dl
  /     %dd
  /       - if !@product.images.nil?
  /         - @product.images.each_with_index do |image, index|
  /           = image_tag image.thumb.url 
  /           //= f.input :remove_images, :as => :boolean, :label => false, :inline_label => true
  /           = link_to "Delete", product_image_path(@product, index), :method => :delete, data: { confirm: "Are you sure you want to delete this image?" }
  /       = f.file_field :images, multiple: true
               
  = field_set_tag 'Financial Properties' do
    .splitContainer
      %dl.third
        %dd= f.input :price
        %dd= error_span(@product[:price])
      %dl.third
        %dd= f.input :cost_price
        %dd= error_span(@product[:cost_price])
      %dl.third
        %dd= f.input :tax_rate_id, :collection => @tax_rates, :selected => @default_tax_rate

  = field_set_tag 'Quantitative Properties' do
    .splitContainer
      %dl.half
        %dd= f.input :size_id, :collection => @sizes, :selected => @default_size
      %dl.half
        %dd= f.input :quantity
        %dd= error_span(@product[:quantity])
     
    = f.fields_for :properties, OpenStruct.new(@product.properties) do |builder|
      - if !@product.subcategory.nil?
        - @product.subcategory.fields.each do |field|
          = render "products/fields/#{field.field_type}", field: field, f:builder 
  
  %p.submit
    = f.button :submit, :class => 'btn-primary'
    = link_to t('.cancel', :default => t("helpers.links.cancel")), products_path, :class => 'btn btn-default'


<!-- Configure Cloudinary jQuery plugin -->
%script{:src => "//widget.cloudinary.com/global/all.js", :type => "text/javascript"}

= cloudinary_js_config

:javascript
$.cloudinary.config({ cloud_name: 'dijs1yfba', api_key: '488196417269728'});


  document.getElementById("upload_widget_opener").addEventListener("click", function() {

    cloudinary.openUploadWidget({ cloud_name: 'dijs1yfba', upload_preset: 'sample_a3cb73f3e13fc75f53e20e800352e1b509ee1f7b'}, 
      function(error, result) { console.log(error, result);
      var preview = $(".preview");
      $(".status").text("");
 
      var arrayLength = result.length;
      for (var i = 0; i < arrayLength; i++) {
        var imageMetadata = result[i];
        
        $.cloudinary.image(imageMetadata.public_id, {
            format: result.format, width: 50, height: 50, crop: "fit"
          }).appendTo(preview);

           $('<a/>').
          addClass('delete_by_token').
          attr({href: '#'}).
          html('&times;').
          appendTo(preview).click(function() {
            $.cloudinary.delete_by_token(imageMetadata.delete_token).done(function(){
             
              
            }).fail(function() {
                $('.status').text("Cannot delete image");
              });
        });
      }
      
       
      /*Make a function  How bad coding I wonder of myself:) */
      var form_type = $("[class^=simple_form]").attr('id');
      var action_path = $("[class^=simple_form]").attr('action');

      var request_type = "patch";
      
      if (form_type == "new_product"){
        request_type = "post";
        action_path = "park_images";
      }

      
      
      $.ajax({

        url : action_path,
        type : request_type,
        data : { data_value: result }
      });


      });

  }, false);




$(document).ready(function() {
  console.log("page has loaded!");
});

  $(document).ready(function() {
    /*
    // Cloudinary jQuery integration library uses jQuery File Upload widget
    // (see http://blueimp.github.io/jQuery-File-Upload/).
    // Any file input field with cloudinary-fileupload class is automatically
    // wrapped using the File Upload widget and configured for Cloudinary uploads.
    // You can further customize the configuration using .fileupload method
    // as we do below.*/
    $(".cloudinary-fileupload")
      .cloudinary_fileupload({
        // Uncomment the following lines to enable client side image resizing and valiation.
        // Make sure cloudinary/processing is included the js file
        //disableImageResize: false,
        //imageMaxWidth: 800,
        //imageMaxHeight: 600,
        //acceptFileTypes: /(\.|\/)(gif|jpe?g|png|bmp|ico)$/i,
        //maxFileSize: 20000000, // 20MB
        dropZone: "#direct_upload",
        start: function (e) {
          $(".status").text("Starting upload...");
        },
        progress: function (e, data) {
          $(".status").text("Uploading... " + Math.round((data.loaded * 100.0) / data.total) + "%");
        },
        fail: function (e, data) {
          $(".status").text("Upload failed");
        }
      })
      .off("cloudinarydone").on("cloudinarydone", function (e, data) {
        $("#photo_bytes").val(data.result.bytes);
        $(".status").text("");
        var preview = $(".preview").html('');
        $.cloudinary.image(data.result.public_id, {
          format: data.result.format, width: 50, height: 50, crop: "fit"
        }).appendTo(preview);

        $('<a/>').
          addClass('delete_by_token').
          attr({href: '#'}).
          data({delete_token: data.result.delete_token}).
          html('&times;').
          appendTo(preview).
          click(function(e) {
            e.preventDefault();
            $.cloudinary.delete_by_token($(this).data('delete_token')).done(function(){
              $('.preview').html('');
              $('#info').html('');
              $("#photo_bytes").val('');
              $('input[name="photo[image]"]').remove();
              $('.status').text("Deleted image");
            }).fail(function() {
              $('.status').text("Cannot delete image");
          });
        });
        view_upload_details(data.result);
      });
    });
    
    function view_upload_details(upload) {
      // Build an html table out of the upload object
      var rows = [];
      $.each(upload, function(k,v){
        rows.push(
          $("<tr>")
            .append($("<td>").text(k))
            .append($("<td>").text(JSON.stringify(v))));
      });
      $("#info").html(
        $("<div class=\"upload_details\">")
          .append("<h2>Upload metadata:</h2>")
          .append($("<table>").append(rows)));
    }